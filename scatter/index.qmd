---
# omit title and subtitle if you're doing a custom title block
title: Untitled
subtitle: A thing here
# for social previews
# twitter-card:
#   site: "@360info_global"
#   image: "/folder/example.png"
# open-graph:
#   image: "/folder/example.png"
# resources:
#   - example.png
format:
  360-embed-html:
    pagetitle: Untitled
    description: A description for social previews
# metadata for modals and embed sharing functionality
360embed:
  byline: James Goldie, 360info
  data-source: XXX
  type: map
  aspect-ratio: 20 / 19
  min-height: 500px
  max-height: 893px
  bg-colour: white
  title: "Interactive: title"
  repo: report-example
  domain: https://climatereadinessvulnerability.360visuals.org
  path: /map/  
  fragments: state, month
  about: |
    Here's a place to **tell people** and [link to things](https://example.com)!
---

{{< include _popups/_buttons.qmd >}}


```{ojs}
//| label: load-data
ndgain = FileAttachment("/data/ndgain-readiness-vulnerability-allyears.csv")
  .csv({ typed: true })
```

```{ojs}
//| label: controls

viewof selectedYear = Inputs.range(
  d3.extent(ndgain, d => d.year), {
    value: d3.max(ndgain, d => d.year),
    label: "Year",
    step: 1
  })

// add event handlers to  year slider so we can suppress flags while sliding
// (they cause performance issues when sliding repeatedly)
mutable isScrubbing = false
selectedYearEvents = d3.select(viewof selectedYear)
  .on("input", () => { mutable isScrubbing = true })
  .on("change", () => { mutable isScrubbing = false })
  .on("mouseup", () => { mutable isScrubbing = false })

viewof countrySearch = Inputs.search(ndgain)
selectedCountries = new Set(countrySearch.map(d => d.name))

viewof selectedHDI = Inputs.radio(
  [
    "All countries",
    "Low",
    "Medium",
    "High",
    "Very high"
  ], {
    value: "All countries",
    label: "Human development"
  }
)

// hdi filtering functions for each classification
hdiBand = ({
  "All countries": d => true,
  "Low":           d => d < 0.55,
  "Medium":        d => d >= 0.55 && d < 0.7,
  "High":          d => d >= 0.7 && d < 0.8,
  "Very high":     d => d >= 0.8
})
```

```{ojs}
//| label: filter-data
thisYearsData = ndgain.filter(d => d.year == selectedYear)

// calculate domain based on selected hdi group
hdiData = ndgain.filter(d => hdiBand[selectedHDI](d.hdi))
hdiVuln = d3.extent(hdiData, d => d.vulnerability)
hdiReadi = d3.extent(hdiData, d => d.readiness)
```

```{ojs}
//| label: plot
Plot = import("https://esm.run/@observablehq/plot@0.6.13")

quadrants = [
  {
    x1: hdiReadi[0],
    y1: hdiVuln[0],
    x2: 0.45,
    y2: 0.45,
    t: "Neither prepared nor vulnerable",
    fill: "goldenrod"
  },
  {
    x1: hdiReadi[0],
    x2: 0.45,
    y1: 0.45,
    y2: hdiVuln[1],
    t: "Vulnerable and less ready",
    fill: "red"
  },
  {
    x1: 0.45,
    x2: hdiReadi[1],
    y1: hdiVuln[0],
    y2: 0.45,
    t: "Prepared and less vulnerable",
    fill: "blue"
  },
  {
    x1: 0.45,
    x2: hdiReadi[1],
    y1: 0.45,
    y2: hdiVuln[1],
    t: "Vulnerable but ready",
    fill: "green"
  }
]

ratingFunc = function(d) {
  if (d.readiness > 0.45) {
    if (d.vulnerability > 0.45) {
      return "Vulnerable but ready"
    } else {
      return "Prepared and less vulnerable"
    }
  } else {
    if (d.vulnerability > 0.45) {
      return "Vulnerable and less ready"
    } else {
      return "Neither prepared nor vulnerable"
    }
  }
}

viewof scatterPlot = Plot.plot({
  marks: [
    Plot.frame(),
    Plot.ruleX([0.45]),
    Plot.ruleY([0.45]),
    Plot.rect(quadrants, {
      x1: "x1",
      x2: "x2",
      y1: "y1",
      y2: "y2",
      fill: "fill",
      fillOpacity: 0.15,
      // stroke: "fill",
      // strokeOpacity: 0.85,
      // strokeWidth: 3
    }),
    Plot.dot(thisYearsData, {
      x: "readiness",
      y: "vulnerability",
      r: 5,
      fill: "black",
      opacity: 0.15
    }),
    // selected hdi band
    Plot.dot(thisYearsData, {
      x: "readiness",
      y: "vulnerability",
      r: 9.25,
      fill: "black",
      filter: d => hdiBand[selectedHDI](d.hdi)
    }),
    Plot.text(thisYearsData, {
      text: "iso3",
      x: "readiness",
      y: "vulnerability",
      dy: 20,
      opacity: 0.5,
      filter: d => hdiBand[selectedHDI](d.hdi)
    }),
    !isScrubbing ? Plot.image(thisYearsData, {
      src: d => "/data/flags/" + d.iso2 + ".svg",
      x: "readiness",
      y: "vulnerability",
      r: 8,
      filter: d => hdiBand[selectedHDI](d.hdi) && selectedCountries.has(d.name)
    }) : null,
    // hovered point
    Plot.dot(thisYearsData, Plot.pointer({
      x: "readiness",
      y: "vulnerability",
      r: 16.25,
      fill: "black",
      filter: d => hdiBand[selectedHDI](d.hdi) && selectedCountries.has(d.name)
    })),
    !isScrubbing ? Plot.image(thisYearsData, Plot.pointer({
      src: d => "/data/flags/" + d.iso2 + ".svg",
      x: "readiness",
      y: "vulnerability",
      r: 15,
      filter: d => hdiBand[selectedHDI](d.hdi) && selectedCountries.has(d.name)
    })) : null,
    Plot.tip(thisYearsData, Plot.pointer({
      x: "readiness",
      y: "vulnerability",
      channels: {
        "Country": {
          label: "",
          value: "name"
        },
        "Rating": {
          label: "",
          value: d => ratingFunc(d)
        },
        "Readiness": "readiness",
        "Vulnerability": "vulnerability"
      },
      format: {
        "x": null,
        "y": null
      },
      lineHeight: 1.25,
      filter: d => hdiBand[selectedHDI](d.hdi)
    }))
  ],
  x: {
    domain: hdiReadi,
    label: "Readiness score"
  },
  y: {
    domain: hdiVuln,
    label: "Vulnerability score"
  },
  color: {
    type: "identity"
  },
  style: {
    fontSize: 14,
    fontFamily: "Roboto Condensed"
  },
  height: 550,
  // inset: 10,
  marginBottom: 40
})
```

```{ojs}
//| label: value

scatterPlot ? `Selected: ${scatterPlot.name}` : `No country selected`
```

{{< include _popups/_dialogs.qmd >}}
